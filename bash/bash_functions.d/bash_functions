# vim: ft=sh

### Git Related Functions ###
function git-open-web
{
  if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    local url
    url=$(git config --get remote.origin.url \
      | sed -e "s/git@/https:\/\//g" \
      | sed -e "s/com:/com\//"
    )
    open "$url"
  else
    echo 'Not inside git repository' 1>&2
    return 1
  fi
}

function git-repo-loc
{
  git clone --depth 1 "${1:?}" temp-linecount-repo \
    && printf "('temp-linecount-repo' will be deleted automatically)\n\n\n" \
    && cloc temp-linecount-repo \
    && rm -rf temp-linecount-repo
}

### OpenSSL functions ###
function ssl-get-site-cert
{
  local domain=${1:?}
  echo \
    | openssl s_client -showcerts -servername ${domain} -connect ${domain}:443 2>/dev/null \
    | openssl x509 -inform pem -noout -text
}

function ssl-check-csr-file
{
  local csr=${1:?}
  openssl req -text -noout -in ${csr}
}
#### Terraform functions ####
# Use all resources in given file as Terraform resource targets
function terraform-target-file
{
  if [[ "$#" -ne 2 ]]; then
    echo "Requires two arguments: action target-file"
    return 1
  fi

  local action=${1:?}
  local target=${2:?}

  local resources=$(awk '/^resource/ { gsub(/"/, ""); printf "--target=%s.%s ", $2, $3 }' <"${target}")
  echo -e "Running:\nterraform $action --refresh=true ${resources}\n\n"
  terraform $action --refresh=true $resources
}

#TODO: This is sloppy and not super portable. It works for now,
# but should definitely be cleaned up. At least add linux compat.
function clc
{
  tail -n1 "$HISTFILE" \
    | tee >(pbcopy)
}

function die
{
  local frame=0
  while caller $frame; do
    ((frame++));
  done

  local format="$1"
  shift
  tput setaf 1
  printf >&2 "$format\n" "$@"
  tput sgr0

  return 1
}

function div-line
{
  printf "%${2:-$(tput cols)}s\n" | tr " " "${1:--}"
}

function mkbak
{
  local file=${1:?}
  cp "$file" "${file}.bak"
}

function cdl
{
  cd $1 \
    && ls -l
}

function ansistrip
{
  if [[ -z "$OSX" ]]; then
    sed -E "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" -i $1
  else
    gsed -E "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" -i $1
  fi
}

# Function to convert video (most formats work) to gif
# two args: input-video and output-gif
# requires ffmpeg and imagemagick
function vid-to-gif
{
  # Check dependencies
  if ! command -v 'ffmpeg' >/dev/null 2>&1; then
    (>&2 echo "This function requires 'ffmpeg', please install it.")
    exit 1
  fi

  if ! command -v 'convert' >/dev/null 2>&1; then
    (>&2 echo "This function requires 'imagemagick', please install it.")
    exit 1
  fi

  ffmpeg -i "${1:?}" -vf scale=800:-1 -r 10 -f image2pipe -vcodec ppm - \
    | convert -delay 5 -layers Optimize -loop 0 - "${2:?}"
}

function ldap_time_convert
{
  local ldap_time="${1:?}"
  local ldap_time_seconds="$((${ldap_time}/10000000))"
  local unix_time_seconds="$((${ldap_time_seconds}-11644473600))"

  if [[ -z "$OSX" ]]; then
    local human_time="$(date -d @${unix_time_seconds})"
  else
    local human_time="$(gdate -d @${unix_time_seconds})"
  fi

  echo "$human_time"
}

function mkcd
{
  local dir=${1:?}
  mkdir -p "$dir" && cd "$dir"
}

function scratch
{
  local file="$(date +%s).scratch"
  touch "$file"
  vim "$file"
}

# Function to find and replace pattern in all files specified
function replace
{
  if [ $# -lt 3 ]; then
    echo "Missing Arguments"
    echo "USAGE:"
    echo "${FUNCNAME[0]} find-this replace-with file/glob"
    return 1
  fi

  local find=${1:?}
  shift
  local replace=${1:?}
  shift

  items=$(grep --color=never -l "$find" "$@")

  temp_file="${TMPDIR:-/tmp}/replace_func_temp_file.$$"
  ${IFS+"false"} && unset oldifs || oldifs="$IFS"
  IFS=$'\n'
  for item in $items; do
    sed "s/$find/$replace/g" "$item" > "$temp_file" \
      && mv "$temp_file" "$item"
  done
  ${oldifs+"false"} && unset IFS || IFS="$oldifs"
}

function move-last-download
{
  local download_dir="${HOME}/Downloads/"
  local last_download="$(ls -t ${download_dir} | head -1)"
  local destination_file="${PWD}/${1:-${last_download}}"

  echo "MV: ${download_dir}${last_download}"
  echo "TO: ${destination_file}"

  mv "${download_dir}${last_download}" "${destination_file}"
}

function command_exists
{
  command -v "${1:?}" >/dev/null 2>&1
}

is_dos_line_endings() {
  local file="${1:?}"
  file -k "$file" \
    | grep -q 'CRLF'
}

function psdt
{
    if [ -z "$1" ]; then
        echo "Missing parameter. Usage: psdt {pid | name}"
        return 0
    fi

    x=$1
    ps aux | awk -v search="$x" 'NR == 1; $0 ~ search' | grep -v awk

}

# Function to cat a file, and evaluate all variables in file
function cat-eval
{
    declare file="${1:?}"
    declare data=$(< "$file")
    declare delimiter="__apply_shell_expansion_delimiter__"
    declare command="cat <<$delimiter"$'\n'"$data"$'\n'"$delimiter"
    eval "$command"
}

function simple-stats
{
  tr -d '[a-z,A-Z,:]' \
    | tr ' ' '\n' \
    | sed '/^$/d' \
    | datamash --header-out min 1 max 1 mean 1 median 1 \
    | column -t
}

# Display all the colors / ANSI codes available to the term
function showcolors
{
    for x in 0 1 4 5 7 8; do 
        for i in `seq 30 37`; do 
            for a in `seq 40 47`; do 
                echo -ne "\e[$x;$i;$a""m\\\e[$x;$i;$a""m\e[0;37;40m "
            done
            echo
        done
    done
    echo ""
}

function tv-static
{
  P=(' ' █ ░ ▒ ▓)
  while :
    do printf "\e[$[RANDOM%LINES+1];$[RANDOM%COLUMNS+1]f${P[$RANDOM%5]}"
  done
}

function weather
{
  # We require 'curl' so check for it
  if ! command -v curl &>/dev/null; then
    printf "%s\n" "[ERROR] weather: This command requires 'curl', please install it."
    return 1
  fi

  # If no arg is given, default to New York, NY
  (curl -sm 10 "http://wttr.in/${*:-NewYork}" 2>/dev/null \
    | grep -v 'New feature\|Follow') \
    || printf "%s\n" "[ERROR] weather: Could not connect to weather service."
}

# Show days passed since given date
# Borrowed from kjsharke
function ageDay
{ 
    echo $(( (`date +%s` - `date -d "$1" +%s`)/(3600*24) ));
}

# This function defines a 'cd' replacement function capable of keeping, 
# displaying and accessing history of visited directories, up to 10 entries.
# To use it, uncomment it, source this file and try 'cd --'.
# acd_func 1.0.5, 10-nov-2004
# Petar Marinov, http:/geocities.com/h2428, this is public domain
function cd_func
{
    local x2 the_new_dir adir index
    local -i cnt

    if [[ $1 ==  "--" ]]; then
        dirs -v
        return 0
    fi

    the_new_dir=$1
    [[ -z $1 ]] && the_new_dir=$HOME

    if [[ ${the_new_dir:0:1} == '-' ]]; then
        # Extract dir N from dirs
        index=${the_new_dir:1}
        [[ -z $index ]] && index=1
        adir=$(dirs +$index)
        [[ -z $adir ]] && return 1
        the_new_dir=$adir
    fi

    # '~' has to be substituted by ${HOME}
    [[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"

    # Now change to the new dir and add to the top of the stack
    pushd "${the_new_dir}" > /dev/null
    [[ $? -ne 0 ]] && return 1
    the_new_dir=$(pwd)

    # Trim down everything beyond 11th entry
    popd -n +11 2>/dev/null 1>/dev/null

    # Remove any other occurence of this dir, skipping the top of the stack
    for ((cnt=1; cnt <= 10; cnt++)); do
        x2=$(dirs +${cnt} 2>/dev/null)
        [[ $? -ne 0 ]] && return 0
        [[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
        if [[ "${x2}" == "${the_new_dir}" ]]; then
        popd -n +$cnt 2>/dev/null 1>/dev/null
        cnt=cnt-1
        fi
    done

    return 0
}
alias cd='cd_func'

# Function to traverse "up" filesystem from CWD
# Credit to reddit user /u/spdqbr
# http://www.reddit.com/r/commandline/comments/2o7rvh/linux_whats_a_good_alternative_to_stuff_like_cd/cmksmek
function cdup {
    newdir="${PWD/\/$1\/*/}/$1"
    if [[ -d "$newdir" ]]
    then
        cd "$newdir"
    else
        echo "\"$newdir\" does not exist"
    fi
}

function _cdup_complete {
    local word=${COMP_WORDS[COMP_CWORD]}
    local list=$(pwd | cut -c 2- | sed -e 's#/[^/]*$##g' -e 's/\([ ()]\)/\\\\\1/g')
    _IFS="$IFS"
    IFS=/
    list=$(compgen -W "$list" -- "$word")
    IFS="$_IFS"
    COMPREPLY=($list)
    return 0
}

complete -F _cdup_complete cdup

# Function to extract common compressed file types
function extract {
 if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
 else
    if [ -f "$1" ] ; then
        local nameInLowerCase=`echo "$1" | awk '{print tolower($0)}'`
        case "$nameInLowerCase" in
          *.tar.bz2)   tar xvjf ./"$1"    ;;
          *.tar.gz)    tar xvzf ./"$1"    ;;
          *.tar.xz)    tar xvJf ./"$1"    ;;
          *.lzma)      unlzma ./"$1"      ;;
          *.bz2)       bunzip2 ./"$1"     ;;
          *.rar)       unrar x -ad ./"$1" ;;
          *.gz)        gunzip ./"$1"      ;;
          *.tar)       tar xvf ./"$1"     ;;
          *.tbz2)      tar xvjf ./"$1"    ;;
          *.tgz)       tar xvzf ./"$1"    ;;
          *.zip)       unzip ./"$1"       ;;
          *.Z)         uncompress ./"$1"  ;;
          *.7z)        7z x ./"$1"        ;;
          *.xz)        unxz ./"$1"        ;;
          *.exe)       cabextract ./"$1"  ;;
          *)           echo "extract: '$1' - unknown archive method" ;;
        esac
      else
        echo "'$1' - file does not exist"
      fi
  fi
}
