# If not running interactively, don't do anything
[[ "$-" != *i* ]] && return

### Source everything from bashrc.d if it exists ###
if [ -d "${HOME}/dotfiles/bash/bashrc.d" ]; then
  for file in ${HOME}/dotfiles/bash/bashrc.d/*; do
    source $file
  done
fi

### Source bash_functions if it exists ###
if [ -f "${HOME}/dotfiles/bash/bash_functions" ]; then
    source "${HOME}/dotfiles/bash/bash_functions"
fi

### Source functions from bash_functions.d if it exists ###
if [ -d "${HOME}/dotfiles/bash/bash_functions.d" ]; then
  for file in ${HOME}/dotfiles/bash/bash_functions.d/*; do
    source $file
  done
fi

# Set options for the git PS1
# We only want to set these if the git-prompt was successfully sourced
if command -v "__git_ps1" > /dev/null 2>&1; then
    export GIT_PS1_SHOWDIRTYSTATE=1
    export GIT_PS1_SHOWSTASHSTATE=1
    export GIT_PS1_SHOWUNTRACKEDFILES=1
    export GIT_PS1_SHOWCOLORHINTS=1
    export GIT_PS1_SHOWUPSTREAM=1
fi

# Add dir_colors (Linux only)
if [[ -z "$OSX" ]]; then
  eval $(dircolors $HOME/dotfiles/bash/dir_colors)
fi

if [[ "$OSX" == "1" ]]; then
# Add bash-completion (OS-X only, see brew bash-completion)
  if [[ -r "/usr/local/etc/profile.d/bash_completion.sh" ]]; then
    . "/usr/local/etc/profile.d/bash_completion.sh"
  fi
  # Go dev environment
  export GOPATH="${HOME}/.go"
  export GOROOT="$(brew --prefix golang)/libexec"
  export PATH="$PATH:${GOPATH}/bin:${GOROOT}/bin"
fi


# Cleanup $PATH / prevent duplicates if bash_profile / bashrc is sourced
# multiple times.
export PATH=$(printf %s "$PATH" | awk -v RS=: '{ if (!arr[$0]++) {printf("%s%s",!ln++?"":":",$0)}}')

# Configure PAGER to use vim for man pages
# N.B. Make sure to clear $PAGER in vimrc so vim's Man function still works
#export PAGER="/bin/sh -c \"unset PAGER;col -b -x | \
#    vim -R -c 'set ft=man nomod nolist' -c 'map q :q<CR>' \
#    -c 'map <SPACE> <C-D>' -c 'map b <C-U>' \
#    -c 'nmap K :Man <C-R>=expand(\\\"<cword>\\\")<CR><CR>' -\""
export PAGER=less

# Bash history settings
shopt -s histappend
shopt -s cmdhist
export HISTFILE=$HOME/.history/bash_history
export HISTSIZE=
export HISTFILESIZE=
export HISTCONTROL="erasedups:ignoreboth"
export HISTTIMEFORMAT='%F %T '
export HISTIGNORE='ls:ll:exit:su:clear:bg:fg:history'

function  __prompt_command
{
  # This line MUST come first!
  local last_exit="$?"

  # Execute history commands: append, clear, rewrite
  history -a
  history -c
  history -r

  # ANSI Escape codes:
  local ANSI_reset="\[\033[00m\]"
  local ANSI_white="\[\033[00;37m\]"
  local ANSI_light_blue="\[\033[00;34m\]"
  local ANSI_green="\[\033[00;32m\]"
  local ANSI_red="\[\033[00;31m\]"
  local ANSI_purple="\[\033[00;35m\]"
  local ANSI_white_on_red="\[\033[00;37;41m\]"

  # Determine if we're connected via SSH to set host color in prompt
  if [[ -z ${SSH_CONNECTION+x} ]]; then
    local prompt_host="${ANSI_red}\h${ANSI_reset}"
  else
    local prompt_host="${ANSI_white_on_red}\h${ANSI_reset}"
  fi

  # Show the exit code of last command
  if [[ $last_exit -ne 0 ]]; then
    local prompt_status=" ${ANSI_white}[${ANSI_red}${last_exit}${ANSI_white}]${ANSI_reset} "
  else
    local prompt_status=" ${ANSI_white}[${ANSI_green}âœ”${ANSI_white}]${ANSI_reset} "
  fi

  # Determine if a python virtual env is set
  if [[ -z ${VIRTUAL_ENV+x} ]]; then
    local prompt_venv=''
  else
    local prompt_venv=" ${ANSI_purple}[py:${VIRTUAL_ENV##*/}]${ANSI_reset}"
  fi

  # Show current AWS environment (if set)
  if [[ -z ${AWS_PROFILE} ]]; then
    local prompt_aws=" ${ANSI_purple}[AWS_PROFILE:default]${ANSI_reset}"
  else
    local prompt_aws=" ${ANSI_purple}[AWS_PROFILE:${AWS_PROFILE}]${ANSI_reset}"
  fi

  # Build the prompt string:
  PS_PRE_GIT="${ANSI_light_blue}{ \w }${ANSI_reset}"
  PS_POST_GIT="${prompt_venv}${prompt_aws}\n${ANSI_green}\u${ANSI_light_blue}@${prompt_host}${prompt_status}${ANSI_white}$ ${ANSI_reset}"
}

PROMPT_COMMAND='__prompt_command; declare -F __git_ps1 &>/dev/null && __git_ps1 "$PS_PRE_GIT" "$PS_POST_GIT"'
