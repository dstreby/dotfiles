# If not running interactively, don't do anything
[[ "$-" != *i* ]] && return

export HISTFILE=$HOME/.history/bash_history

# Add dir_colors for solarized-ls
eval `dircolors $HOME/dotfiles/bash/dir_colors`

# Add user defined dir to PATH
export PATH=$PATH:$HOME/opt/bin:$HOME/.local/bin:

# Aliases:
alias erxc='erxs -c'
alias ls='ls --color=tty'
alias la='ls -lah --color=tty'
alias ll='ls -lh --color=tty'
alias lt='ls -lhtr --color=tty'
alias sourceme='source ~/.bashrc'
alias pip='/usr/bin/pip-python'
# Functions

mkcd()
{
    mkdir $1 && cd $1
}

allgit()
{
	if [ -z "$1" ]
	then
		echo Checking all git repositories in Home Directory...
		DIR=$HOME
	elif [ "$1" == "." ]
	then
		echo Checking all git repositories in $PWD...
		DIR=$1
	else
		echo Checking all git repositories in $1...
		DIR=$1
	fi

	for REPO in `find $DIR -name ".git" -type d`; do
	   WD=$(echo $REPO | awk -F/.git '{print $1}')
	   echo "-------------------------------------------------------------"
	   echo $WD | awk -v home="$HOME" '{ sub(home, "~"); print "Repository at: ", $0;}'
	   git --git-dir=$REPO --work-tree=$WD status 2>/dev/null | \
		 awk 'NR==1 {
				branch = $4
			}
			NR==2 {
				if($6=="clean)")printf("\t\033[0;32mBranch: \"%s\" is clean :)\033[0m\n",branch); 
				else printf("\t\033[0;31mBranch: \"%s\" is Dirty :(\033[0m\n",branch);
			}'
	done
}

passgen()
{
    if [ -z "$1" ]
    then
        echo Generating password with default length 16
		LEN=16
    else
        echo Generating password with length $1
		LEN=$1
	fi
    < /dev/urandom tr -dc [:graph:] | \
		head -c$LEN | \
		sed -e "s/.\(.\).\(.\).\(.*\)/$(< /dev/urandom tr -dc "0-9" | \
		head -c1)\1$(< /dev/urandom tr -dc "a-z" | \
		head -c1)\2$(< /dev/urandom tr -dc "A-Z" | \
		head -c1)\3/" | \
		tee /dev/clipboard
    echo 
}

function parse_git_branch {
  #git status 2> /dev/null | awk 'NR==1 {printf("[%s", $4)} NR==2 {if($6!="clean)")print "\033[00;31m*\033[00;37m]"; else print "]"}'
  git status 2>/dev/null | awk 'NR==1 {branch = $4} NR==2 {if($2=="Untracked")printf("\033[00;37m(\033[00;31m %s \033[00;37m) \033[01;41;37m + \033[0m\n",branch); else if($6=="clean)")printf("\033[00;37m(\033[00;32m %s \033[00;37m)\033[0m\n",branch); else printf("\033[00;37m(\033[00;31m %s \033[00;37m) \033[01;41;37m * \033[0m\n",branch);}'
}

# Bash Prompt:
PS1='\033[00;37m\]┌─ \[\033[00;34m\]{ \w }\033[00;37m\]$(parse_git_branch)\n\[\033[00;37m\]└─ \[\033[00;32m\]\u\[\033[00;34m\]@\[\033[00;31m\]\h\033[00;32m\]->\[\033[01;37m\]$ \[\033[00m\]'

# If this is an xterm set the title to user@host:dir
case "$TERM" in
    xterm*|rxvt*)
        PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"'

        # Show the currently running command in the terminal title:
        # http://www.davidpashley.com/articles/xterm-titles-with-bash.html
        show_command_in_title_bar()
        {
            case "$BASH_COMMAND" in
                *\033]0*)
                    # The command is trying to set the title bar as well;
                    # this is most likely the execution of $PROMPT_COMMAND.
                    # In any case nested escapes confuse the terminal, so don't
                    # output them.
                    ;;
                *)
                    echo -ne "\033]0;${USER}@${HOSTNAME}: ${BASH_COMMAND}\007"
                    ;;
            esac
        }
        trap show_command_in_title_bar DEBUG
        ;;
    screen*)
        PROMPT_COMMAND='echo -ne "\033kbash\033\\"'
        set_screen_title()
        {
            case "$BASH_COMMAND" in
                *\033k*)
                    ;;
                *\033]0*)
                    ;;
                *)
                    echo -ne "\033k`echo ${BASH_COMMAND} | awk '{print $1;}'`\033\\"
                    ;;
            esac
        }
        trap set_screen_title DEBUG
        ;;
    *)
        ;;
esac

# Shell Options
#
# See man bash for more options...
#
# Don't wait for job termination notification
# set -o notify
#
# Don't use ^D to exit
# set -o ignoreeof
#
# Use case-insensitive filename globbing
# shopt -s nocaseglob
#
# Make bash append rather than overwrite the history on disk
# shopt -s histappend
#
# When changing directory small typos can be ignored by bash
# for example, cd /vr/lgo/apaache would find /var/log/apache
# shopt -s cdspell

# Completion options
#
# These completion tuning parameters change the default behavior of bash_completion:
#
# Define to access remotely checked-out files over passwordless ssh for CVS
# COMP_CVS_REMOTE=1
#
# Define to avoid stripping description in --option=description of './configure --help'
# COMP_CONFIGURE_HINTS=1
#
# Define to avoid flattening internal contents of tar files
# COMP_TAR_INTERNAL_PATHS=1
#
# Uncomment to turn on programmable completion enhancements.
# Any completions you add in ~/.bash_completion are sourced last.
# [[ -f /etc/bash_completion ]] && . /etc/bash_completion

# History Options
#
# Don't put duplicate lines in the history.
# export HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
#
# Ignore some controlling instructions
# HISTIGNORE is a colon-delimited list of patterns which should be excluded.
# The '&' is a special pattern which suppresses duplicate entries.
# export HISTIGNORE=$'[ \t]*:&:[fb]g:exit'
# export HISTIGNORE=$'[ \t]*:&:[fb]g:exit:ls' # Ignore the ls command as well
#
# Whenever displaying the prompt, write the previous line to disk
# export PROMPT_COMMAND="history -a"

# Aliases
#
# Some people use a different file for aliases
# if [ -f "${HOME}/.bash_aliases" ]; then
#   source "${HOME}/.bash_aliases"
# fi
#
# Some example alias instructions
# If these are enabled they will be used instead of any instructions
# they may mask.  For example, alias rm='rm -i' will mask the rm
# application.  To override the alias instruction use a \ before, ie
# \rm will call the real rm not the alias.
#
# Interactive operation...
# alias rm='rm -i'
# alias cp='cp -i'
# alias mv='mv -i'
#
# Default to human readable figures
# alias df='df -h'
# alias du='du -h'

#
# Misc :)
# alias less='less -r'                          # raw control characters
# alias whence='type -a'                        # where, of a sort
# alias grep='grep --color'                     # show differences in colour
# alias egrep='egrep --color=auto'              # show differences in colour
# alias fgrep='fgrep --color=auto'              # show differences in colour
#
# Some shortcuts for different directory listings
# alias ls='ls -hF --color=tty'                 # classify files in colour
# alias dir='ls --color=auto --format=vertical'
# alias vdir='ls --color=auto --format=long'
# alias ll='ls -l'                              # long list
# alias la='ls -A'                              # all but . and ..
# alias l='ls -CF'                              #

# Umask
#
# /etc/profile sets 022, removing write perms to group + others.
# Set a more restrictive umask: i.e. no exec perms for others:
# umask 027
# Paranoid: neither group nor others have any perms:
# umask 077

# Functions
#
# Some people use a different file for functions
# if [ -f "${HOME}/.bash_functions" ]; then
#   source "${HOME}/.bash_functions"
# fi
#
# Some example functions:
#
# a) function settitle
# settitle () 
# { 
#   echo -ne "\e]2;$@\a\e]1;$@\a"; 
# }
# 
# b) function cd_func
# This function defines a 'cd' replacement function capable of keeping, 
# displaying and accessing history of visited directories, up to 10 entries.
# To use it, uncomment it, source this file and try 'cd --'.
# acd_func 1.0.5, 10-nov-2004
# Petar Marinov, http:/geocities.com/h2428, this is public domain
# cd_func ()
# {
#   local x2 the_new_dir adir index
#   local -i cnt
# 
#   if [[ $1 ==  "--" ]]; then
#     dirs -v
#     return 0
#   fi
# 
#   the_new_dir=$1
#   [[ -z $1 ]] && the_new_dir=$HOME
# 
#   if [[ ${the_new_dir:0:1} == '-' ]]; then
#     #
#     # Extract dir N from dirs
#     index=${the_new_dir:1}
#     [[ -z $index ]] && index=1
#     adir=$(dirs +$index)
#     [[ -z $adir ]] && return 1
#     the_new_dir=$adir
#   fi
# 
#   #
#   # '~' has to be substituted by ${HOME}
#   [[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"
# 
#   #
#   # Now change to the new dir and add to the top of the stack
#   pushd "${the_new_dir}" > /dev/null
#   [[ $? -ne 0 ]] && return 1
#   the_new_dir=$(pwd)
# 
#   #
#   # Trim down everything beyond 11th entry
#   popd -n +11 2>/dev/null 1>/dev/null
# 
#   #
#   # Remove any other occurence of this dir, skipping the top of the stack
#   for ((cnt=1; cnt <= 10; cnt++)); do
#     x2=$(dirs +${cnt} 2>/dev/null)
#     [[ $? -ne 0 ]] && return 0
#     [[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
#     if [[ "${x2}" == "${the_new_dir}" ]]; then
#       popd -n +$cnt 2>/dev/null 1>/dev/null
#       cnt=cnt-1
#     fi
#   done
# 
#   return 0
# }
# 
# alias cd=cd_func
